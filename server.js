// Generated by CoffeeScript 1.8.0
(function() {
  var CorsHandler, DynamicViewsHandler, ErrorHandler, MiddlewaresLoader, ModelsLoader, MultiViews, RoutesLoader, app, bodyParser, config, cookieParser, express, favicon, logger, path, staticRoute, staticRoutes, views, _, _i, _j, _len, _len1;

  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  _ = require('lodash');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  MultiViews = require('multi-views');

  config = require('./config/config.js');

  CorsHandler = require('./core/handlers/cors-handler.js');

  DynamicViewsHandler = require('./core/handlers/dynamic-views-handler.js');

  ModelsLoader = require('./core/loaders/waterline-loader.js');

  RoutesLoader = require('./core/loaders/routes-loader.js');

  ErrorHandler = require('./app/handlers/ErrorHandler.js');

  MiddlewaresLoader = require('./app/middlewares/loader.js');

  app = express();

  app.disable('x-powered-by');

  app.use(function(req, res, next) {
    res.setHeader('X-Powered-By', 'Endless river of sweat and tears');
    next();
  });

  app.use('*.coffee', function(req, res, next) {
    var err;
    console.log("[Blocked] Access to coffeescript %s %s", req.method, req.url);
    err = ErrorHandler.createError('Forbidden', {
      status: 403
    });
    next(err);
  });

  staticRoutes = [
    {
      src: '/public',
      dest: path.join(__dirname, 'public')
    }, {
      src: '/core',
      dest: path.join(__dirname, 'public', 'core')
    }, {
      src: '/vendor',
      dest: path.join(__dirname, 'public', 'vendor')
    }, {
      src: '/js',
      dest: path.join(__dirname, 'public', config.appDir, 'js')
    }, {
      src: '/css',
      dest: path.join(__dirname, 'public', config.appDir, 'css')
    }, {
      src: '/img',
      dest: path.join(__dirname, 'public', config.appDir, 'img')
    }, {
      src: '/partials',
      dest: path.join(__dirname, 'public', config.appDir, 'partials')
    }, {
      src: '/templates',
      dest: path.join(__dirname, 'public', config.appDir, 'templates')
    }
  ];

  for (_i = 0, _len = staticRoutes.length; _i < _len; _i++) {
    staticRoute = staticRoutes[_i];
    app.use(staticRoute.src, express["static"](staticRoute.dest));
  }

  app.set('config', config);

  MiddlewaresLoader.registerMiddlewares(app);

  app.use(app.get('middlewares')['redirector']);

  app.use(favicon(path.join(__dirname, 'public', config.appDir, 'img', 'favicon.ico')));

  app.use(cookieParser());

  app.use(bodyParser.json({
    extended: false
  }));

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(CorsHandler.allowDomain('*'));

  app.use(ErrorHandler.resRenderer);

  ModelsLoader.initialize(app, config.db);

  MultiViews.setupMultiViews(app);

  DynamicViewsHandler.setupViews(app, [path.join(__dirname, config.appDir, 'views', 'default'), path.join(__dirname, 'core', 'views', 'default')]);

  for (_j = 0, _len1 = staticRoutes.length; _j < _len1; _j++) {
    staticRoute = staticRoutes[_j];
    app.use(staticRoute.src, ErrorHandler.displayAppError(ErrorHandler.createError('Not Found', {
      status: 404
    })));
  }

  app.use(logger(config.env === 'development' ? 'dev' : 'tiny'));

  RoutesLoader.loadRoutes(path.join(__dirname, config.appDir, 'routes'));

  RoutesLoader.registerRoutes(app);

  views = app.get('views');

  app.use(ErrorHandler.createAppError('Not Found', {
    status: 404
  }));

  app.use(ErrorHandler.displayAppError());

  module.exports = app;

}).call(this);

//# sourceMappingURL=server.js.map
