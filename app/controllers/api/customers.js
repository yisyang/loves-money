// Generated by CoffeeScript 1.8.0
(function() {
  var controller, formatAlias, hmacSha1, sha1;

  hmacSha1 = require('crypto-js/hmac-sha1');

  sha1 = require('crypto-js/sha1');

  controller = {};

  controller.index = function(req, res) {
    res._cc.fail('Invalid route, please use the UI at loves.money or view github source for valid requests.');
  };

  controller.get = function(req, res) {
    var customers;
    customers = req.app.models.customer;
    customers.findOne({
      id: req.params.customer
    }, function(err, customer) {
      if (err) {
        res._cc.fail('Unable to get customer', {}, err);
      }
      if (customer) {
        res._cc.success(formatAlias(req, customer));
      } else {
        res._cc.fail('Alias not found');
      }
    });
  };

  controller.create = function(req, res) {
    var customers, new_customer, _ref;
    customers = req.app.models.customer;
    new_customer = {
      src_name: req.body.customer,
      dest_domain: req.body.domain,
      dest_email: req.body.email,
      customer_secret_hash: hmacSha1(req.body.secret, req.app.get('config').secret_keys.db_hash).toString(),
      customer_secret: sha1(Math.random().toString()).toString()
    };
    if (!new_customer.src_name || ((_ref = new_customer.src_name) === 'abuse' || _ref === 'admin' || _ref === 'administrator' || _ref === 'billing' || _ref === 'hostmaster' || _ref === 'info' || _ref === 'postmaster' || _ref === 'ssl-admin' || _ref === 'support' || _ref === 'webmaster')) {
      res._cc.fail('Requested customer is reserved');
      return;
    }
    customers.create(new_customer).then(function(customer) {
      req.app.models.virtual_customer.create({
        domain_id: req.app.get('config').mailserver_domain_id,
        source: new_customer.src_name + '@loves.money',
        destination: new_customer.dest_email
      }).then(function() {
        return res._cc.success(formatAlias(req, customer));
      })["catch"](function(err) {
        customers.destroy({
          id: customer.id
        }, function() {});
        res._cc.fail('Error creating mail customer', {}, err);
      });
    })["catch"](function() {
      customers.findOne().where({
        src_name: new_customer.src_name
      }).then(function(customer) {
        if (customer) {
          res._cc.fail('The customer is already registered');
          throw false;
        }
        return customers.findOne().where({
          dest_domain: new_customer.dest_domain
        }).then(function(customer) {
          return customer;
        });
      }).then(function(customer) {
        if (customer) {
          res._cc.fail('The domain is already registered');
          throw false;
        }
        return customers.findOne().where({
          dest_email: new_customer.dest_email
        }).then(function(customer) {
          return customer;
        });
      }).then(function(customer) {
        if (customer) {
          res._cc.fail('The email is already registered');
          throw false;
        }
      })["catch"](function(err) {
        if (err) {
          res._cc.fail('Error creating customer', {}, err);
        }
      });
    });
  };

  controller["delete"] = function(req, res) {
    var customers, _ref;
    if (!req.body.customer_secret) {
      return res._cc.fail('Please provide the customer_secret');
    }
    if (!req.params.customer || ((_ref = req.params.customer) === 'abuse' || _ref === 'admin' || _ref === 'administrator' || _ref === 'billing' || _ref === 'hostmaster' || _ref === 'info' || _ref === 'postmaster' || _ref === 'ssl-admin' || _ref === 'support' || _ref === 'webmaster')) {
      res._cc.fail('Requested customer is reserved');
      return;
    }
    customers = req.app.models.customer;
    return customers.findOne().where({
      src_name: req.params.customer
    }).then(function(customer) {
      if (!customer) {
        res._cc.fail('Alias not found');
        throw false;
      }
      if (customer.customer_secret !== req.body.customer_secret) {
        res._cc.fail('Incorrect secret');
        throw false;
      }
      req.app.models.virtual_customer.destroy({
        domain_id: req.app.get('config').mailserver_domain_id,
        destination: customer.dest_email
      }).then(function() {
        return customers.destroy({
          id: customer.id
        }, function(err) {
          if (err) {
            res._cc.fail('Unable to delete customer', {}, err);
            throw false;
          }
          res._cc.success();
        });
      })["catch"](function(err) {
        res._cc.fail('Error deleting mail customer', {}, err);
      });
      return;
    })["catch"](function(err) {
      if (err) {
        res._cc.fail('Unable to get customer', {}, err);
      }
    });
  };

  controller.truncate = function(req, res) {
    var customers;
    if (req.app.get('config').env === !'development') {
      res._cc.fail('Invalid route, please use the UI at loves.money or view github source for valid requests.');
      return;
    } else {
      customers = req.app.models.customer;
      customers.query('TRUNCATE TABLE customers', function(err) {
        if (err) {
          return res._cc.fail('Unable to truncate customers', {}, err);
        }
        res._cc.success();
      });
    }
  };

  formatAlias = function(req, customer) {
    var result;
    result = {
      customer: customer.src_name,
      domain: customer.dest_domain,
      email: customer.dest_email
    };
    if (req.headers['api-secret'] === req.app.get('config').secret_keys.api_secret) {
      result.customer_secret = customer.customer_secret;
    }
    return result;
  };

  module.exports = controller;

}).call(this);

//# sourceMappingURL=customers.js.map
