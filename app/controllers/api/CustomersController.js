// Generated by CoffeeScript 1.8.0
(function() {
  var CustomersController, hmacSha1, uuid;

  hmacSha1 = require('crypto-js/hmac-sha1');

  uuid = require('uuid');

  CustomersController = (function() {
    function CustomersController() {}

    CustomersController.index = function(req, res) {
      res._cc.fail('Invalid route, please use the UI at loves.money or view github source for valid requests.');
    };

    CustomersController.createCustomer = function(req, retriesLeft) {
      var newCustomer;
      if (retriesLeft == null) {
        retriesLeft = 3;
      }
      newCustomer = {
        name: req.body.name,
        email: req.body.email
      };
      newCustomer.id = uuid.v4();
      newCustomer.pwHash = hmacSha1(req.body.pwHash, newCustomer.id + req.app.get('config').secret_keys.db_hash).toString();
      return req.app.getModel('Customer').create(newCustomer).then(function(customer) {
        return customer;
      })["catch"](function(err) {
        if (retriesLeft <= 0) {
          throw err;
        }
        return CustomersController.createCustomer(req, retriesLeft - 1);
      });
    };

    CustomersController.formatCustomer = function(customer) {
      return {
        id: customer.id,
        name: customer.name,
        email: customer.email
      };
    };

    CustomersController.getCustomer = function(req, res) {
      var currentUser;
      currentUser = req.app.get('user');
      if (currentUser.id !== req.params.id && !currentUser.isAdmin) {
        res._cc.fail('Not authorized', 401);
        return;
      }
      req.app.getModel('Customer').findOne({
        id: req.params.id
      }, function(err, customer) {
        if (err) {
          res._cc.fail('Unable to get customer', 500, null, err);
          return;
        }
        if (customer) {
          res._cc.success(CustomersController.formatCustomer(customer));
        } else {
          res._cc.fail('Customer not found');
        }
      });
    };

    CustomersController.postCustomer = function(req, res) {
      if (!req.body.name || !req.body.email || !req.body.pwHash) {
        res._cc.fail('Missing required parameters');
        return;
      }
      req.app.getModel('Customer').findOne().where({
        email: req.body.email
      }).then(function(customer) {
        if (customer) {
          res._cc.fail('Customer email is already in use by an ' + (customer.isActive ? 'active' : 'inactive') + ' customer', 500);
          throw false;
        }
      }).then(function() {
        return CustomersController.createCustomer(req);
      }).then(function(customer) {
        res._cc.success(CustomersController.formatCustomer(customer));
      })["catch"](function(err) {
        if (err) {
          res._cc.fail('Error creating customer', 500, null, err);
        }
      });
    };

    CustomersController.deleteCustomer = function(req, res) {
      req.app.getModel('Customer').findOne({
        id: req.params.id,
        isActive: true
      }).then(function(customer) {
        customer.isActive = false;
        return customer.save();
      }).then(function() {
        res._cc.success();
      })["catch"](function(err) {
        res._cc.fail('Unable to delete customer', 500, null, err);
      });
    };

    return CustomersController;

  })();

  module.exports = CustomersController;

}).call(this);

//# sourceMappingURL=CustomersController.js.map
