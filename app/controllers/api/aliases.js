// Generated by CoffeeScript 1.8.0
(function() {
  var controller, formatAlias, hmacSha1, sha1;

  hmacSha1 = require('crypto-js/hmac-sha1');

  sha1 = require('crypto-js/sha1');

  controller = {};

  controller.getIndex = function(req, res) {
    res._cc.fail('Invalid route, please use the UI at loves.money or view github source for valid requests.');
  };

  controller.getAlias = function(req, res) {
    var aliases;
    aliases = req.app.models.alias;
    aliases.findOne({
      src_name: req.params.alias
    }, function(err, alias) {
      if (err) {
        res._cc.fail('Unable to get alias', null, err);
      }
      if (alias) {
        res._cc.success(formatAlias(req, alias));
      } else {
        res._cc.fail('Alias not found');
      }
    });
  };

  controller.postAlias = function(req, res) {
    var aliases, new_alias, _ref;
    aliases = req.app.models.alias;
    new_alias = {
      src_name: req.body.alias,
      dest_domain: req.body.domain,
      dest_email: req.body.email,
      customer_secret_hash: hmacSha1(req.body.secret, req.app.get('config').secret_keys.db_hash).toString(),
      alias_secret: sha1(Math.random().toString()).toString()
    };
    if (!new_alias.src_name || ((_ref = new_alias.src_name) === 'abuse' || _ref === 'admin' || _ref === 'administrator' || _ref === 'billing' || _ref === 'hostmaster' || _ref === 'info' || _ref === 'postmaster' || _ref === 'ssl-admin' || _ref === 'support' || _ref === 'webmaster')) {
      res._cc.fail('Requested alias is reserved');
      return;
    }
    aliases.create(new_alias).then(function(alias) {
      req.app.models.virtual_alias.create({
        domain_id: req.app.get('config').mailserver_domain_id,
        source: new_alias.src_name + '@loves.money',
        destination: new_alias.dest_email
      }).then(function() {
        return res._cc.success(formatAlias(req, alias));
      })["catch"](function(err) {
        aliases.destroy({
          id: alias.id
        }, function() {});
        res._cc.fail('Error creating mail alias', null, err);
      });
    })["catch"](function() {
      aliases.findOne().where({
        src_name: new_alias.src_name
      }).then(function(alias) {
        if (alias) {
          res._cc.fail('The alias is already registered');
          throw false;
        }
        return aliases.findOne().where({
          dest_domain: new_alias.dest_domain
        }).then(function(alias) {
          return alias;
        });
      }).then(function(alias) {
        if (alias) {
          res._cc.fail('The domain is already registered');
          throw false;
        }
        return aliases.findOne().where({
          dest_email: new_alias.dest_email
        }).then(function(alias) {
          return alias;
        });
      }).then(function(alias) {
        if (alias) {
          res._cc.fail('The email is already registered');
          throw false;
        }
      })["catch"](function(err) {
        if (err) {
          res._cc.fail('Error creating alias', null, err);
        }
      });
    });
  };

  controller.deleteAlias = function(req, res) {
    var aliases, _ref;
    if (!req.body.alias_secret) {
      return res._cc.fail('Please provide the alias_secret');
    }
    if (!req.params.alias || ((_ref = req.params.alias) === 'abuse' || _ref === 'admin' || _ref === 'administrator' || _ref === 'billing' || _ref === 'hostmaster' || _ref === 'info' || _ref === 'postmaster' || _ref === 'ssl-admin' || _ref === 'support' || _ref === 'webmaster')) {
      res._cc.fail('Requested alias is reserved');
      return;
    }
    aliases = req.app.models.alias;
    aliases.findOne().where({
      src_name: req.params.alias
    }).then(function(alias) {
      if (!alias) {
        res._cc.fail('Alias not found');
        throw false;
      }
      if (alias.alias_secret !== req.body.alias_secret) {
        res._cc.fail('Incorrect secret');
        throw false;
      }
      req.app.models.virtual_alias.destroy({
        domain_id: req.app.get('config').mailserver_domain_id,
        destination: alias.dest_email,
        custom: true
      }).then(function() {
        return aliases.destroy({
          id: alias.id
        });
      }).then(function() {
        res._cc.success();
      })["catch"](function(err) {
        res._cc.fail('Unable to delete alias', null, err);
      });
    })["catch"](function(err) {
      if (err) {
        res._cc.fail('Unable to get alias', null, err);
      }
    });
  };

  controller.deleteAll = function(req, res) {
    var aliases;
    if (req.app.get('config').env === !'development') {
      res._cc.fail('Invalid route, please use the UI at loves.money or view github source for valid requests.');
      return;
    }
    aliases = req.app.models.alias;
    aliases.query('TRUNCATE TABLE aliases').then(function() {
      return req.app.models.virtual_alias.destroy({
        custom: true
      });
    }).then(function() {
      res._cc.success();
    })["catch"](function(err) {
      if (err) {
        res._cc.fail('Unable to truncate aliases', null, err);
      }
    });
  };

  formatAlias = function(req, alias) {
    var result;
    result = {
      alias: alias.src_name,
      domain: alias.dest_domain,
      email: alias.dest_email
    };
    if (req.headers['api-secret'] === req.app.get('config').secret_keys.api_secret) {
      result.alias_secret = alias.alias_secret;
    }
    return result;
  };

  module.exports = controller;

}).call(this);

//# sourceMappingURL=aliases.js.map
