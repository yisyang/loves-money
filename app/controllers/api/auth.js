// Generated by CoffeeScript 1.8.0
(function() {
  var controller, formatCustomer, hmacSha1, jwt;

  hmacSha1 = require('crypto-js/hmac-sha1');

  jwt = require('jsonwebtoken');

  controller = {};

  controller.postLogin = function(req, res) {
    if (!req.body.email || !req.body.pwHash) {
      res._cc.fail('Missing credentials', 401);
      return;
    }
    req.app.getModel('Customer').findOne().where({
      email: req.body.email
    }).then(function(customer) {
      var providedPwHash;
      if (customer && req.body.pwHash) {
        providedPwHash = hmacSha1(req.body.pwHash, customer.id + req.app.get('config').secret_keys.db_hash).toString();
        if (providedPwHash === customer.pwHash) {
          return customer;
        }
      }
      return false;
    }).then(function(customer) {
      var appConfig, token;
      if (!customer) {
        throw new Error('Customer not found or bad password');
      }
      appConfig = req.app.get('config');
      token = jwt.sign(formatCustomer(customer), appConfig.jwt.secret, {
        expiresInMinutes: appConfig.jwt.expire_minutes
      });
      res._cc.success(token);
    })["catch"](function(err) {
      if (err) {
        res._cc.fail('Invalid credentials', 401, null, err);
        return;
      }
    });
  };

  controller.getRefresh = function(req, res) {
    var appConfig, currentUser, token;
    currentUser = req.app.get('user');
    appConfig = req.app.get('config');
    token = jwt.sign(currentUser, appConfig.jwt.secret, {
      expiresInMinutes: 1
    });
    res._cc.success(token);
  };

  formatCustomer = function(customer) {
    var result;
    return result = {
      id: customer.id,
      name: customer.name,
      email: customer.email
    };
  };

  module.exports = controller;

}).call(this);

//# sourceMappingURL=auth.js.map
