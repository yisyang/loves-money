// Generated by CoffeeScript 1.8.0
(function() {
  var AuthController, formatCustomer, hmacSha1, jwt;

  hmacSha1 = require('crypto-js/hmac-sha1');

  jwt = require('jsonwebtoken');

  AuthController = (function() {
    function AuthController() {}

    AuthController.postLogin = function(req, res) {
      if (!req.body.email || !req.body.pwHash) {
        res.fail('Missing credentials', 401);
        return;
      }
      req.app.getModel('Customer').findOne().where({
        email: req.body.email
      }).then(function(customer) {
        var providedPwHash;
        if (customer && req.body.pwHash) {
          providedPwHash = hmacSha1(req.body.pwHash, customer.id + req.app.get('config').secret_keys.db_hash).toString();
          if (providedPwHash === customer.pwHash) {
            return customer;
          }
        }
        return false;
      }).then(function(customer) {
        var appConfig, token;
        if (!customer) {
          throw new Error('Customer not found or bad password');
        }
        appConfig = req.app.get('config');
        token = jwt.sign(formatCustomer(customer), appConfig.jwt.secret, {
          expiresInMinutes: appConfig.jwt.expire_minutes
        });
        res.success(token);
      })["catch"](function(err) {
        if (err) {
          res.fail('Invalid credentials', 401, null, err);
          return;
        }
      });
    };

    AuthController.getRefresh = function(req, res) {
      var appConfig, currentUser, token;
      currentUser = req.app.get('user');
      appConfig = req.app.get('config');
      token = jwt.sign(currentUser, appConfig.jwt.secret, {
        expiresInMinutes: 1
      });
      res.success(token);
    };

    return AuthController;

  })();

  formatCustomer = function(customer) {
    return {
      id: customer.id,
      name: customer.name,
      email: customer.email,
      isAdmin: customer.isAdmin
    };
  };

  module.exports = AuthController;

}).call(this);

//# sourceMappingURL=AuthController.js.map
