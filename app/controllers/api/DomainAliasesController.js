// Generated by CoffeeScript 1.8.0
(function() {
  var DomainAliasesController, Promise, hmacSha1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  hmacSha1 = require('crypto-js/hmac-sha1');

  Promise = require('bluebird');

  DomainAliasesController = (function() {
    function DomainAliasesController() {}

    DomainAliasesController.reservedAliases = ['', 'api', 'admin', 'administrator', 'billing', 'help', 'info', 'ssl-admin', 'support', 'www'];

    DomainAliasesController.getIndex = function(req, res) {
      res._cc.fail('Invalid route, please use the UI at loves.money or view github source for valid requests.');
    };

    DomainAliasesController.formatAlias = function(alias) {
      return {
        customerId: alias.customerId,
        alias: alias.srcName,
        domain: alias.destDomain
      };
    };

    DomainAliasesController.getAlias = function(req, res) {
      req.app.getModel('DomainAlias').findOne({
        srcName: req.params.alias
      }).then(function(domainAlias) {
        if (domainAlias) {
          res._cc.success(DomainAliasesController.formatAlias(domainAlias));
        } else {
          res._cc.fail('Alias not found');
        }
      })["catch"](function(err) {
        res._cc.fail('Unable to get alias', 500, null, err);
      });
    };

    DomainAliasesController.postAlias = function(req, res) {
      var DomainAlias, currentUser, newAlias, _ref;
      currentUser = req.app.get('user');
      newAlias = {
        customerId: currentUser.id,
        srcName: req.body.alias,
        destDomain: req.body.domain
      };
      if (!newAlias.srcName || (_ref = newAlias.srcName, __indexOf.call(DomainAliasesController.reservedAliases, _ref) >= 0)) {
        res._cc.fail('Requested alias is reserved');
        return;
      }
      DomainAlias = req.app.getModel('DomainAlias');
      DomainAlias.create(newAlias).then(function(alias) {
        res._cc.success(DomainAliasesController.formatAlias(alias));
      })["catch"](function(err) {
        DomainAlias.findOne().where({
          srcName: newAlias.srcName
        }).then(function(alias) {
          if (alias) {
            res._cc.fail('The alias is already registered');
            throw false;
          }
          return DomainAlias.findOne().where({
            destDomain: newAlias.destDomain
          }).then(function(alias) {
            return alias;
          });
        }).then(function(alias) {
          if (alias) {
            res._cc.fail('The domain is already registered');
            throw false;
          } else {
            throw err;
          }
        })["catch"](function(err) {
          if (err) {
            res._cc.fail('Error creating alias', 500, null, err);
          }
        });
      });
    };

    DomainAliasesController.deleteAlias = function(req, res) {
      var DomainAlias, _ref;
      if (!req.params.alias || (_ref = req.params.alias, __indexOf.call(DomainAliasesController.reservedAliases, _ref) >= 0)) {
        res._cc.fail('Requested alias is reserved');
        return;
      }
      DomainAlias = req.app.getModel('DomainAlias');
      DomainAlias.findOne().where({
        srcName: req.params.alias
      }).then(function(alias) {
        var currentUser;
        if (!alias) {
          res._cc.fail('Alias not found');
          throw false;
        }
        currentUser = req.app.get('user');
        if (currentUser.id !== alias.customerId && !currentUser.isAdmin) {
          res._cc.fail('You are not the owner of this alias!', 401);
          return;
        }
        DomainAlias.destroy({
          id: alias.id
        }).then(function() {
          res._cc.success();
        })["catch"](function(err) {
          res._cc.fail('Unable to delete alias', 500, null, err);
        });
      })["catch"](function(err) {
        if (err) {
          res._cc.fail('Unable to get alias', 500, null, err);
        }
      });
    };

    DomainAliasesController.deleteAll = function(req, res) {
      var currentUser;
      if (req.app.get('config').env === !'development') {
        res._cc.fail('Forbidden', 403);
        return;
      }
      currentUser = req.app.get('user');
      if (!currentUser.isAdmin) {
        res._cc.fail('Not authorized', 401);
        return;
      }
      req.app.getModel('DomainAlias').query('TRUNCATE TABLE domain_aliases').then(function() {
        res._cc.success();
      })["catch"](function(err) {
        if (err) {
          res._cc.fail('Unable to truncate aliases', 500, null, err);
        }
      });
    };

    return DomainAliasesController;

  })();

  module.exports = DomainAliasesController;

}).call(this);

//# sourceMappingURL=DomainAliasesController.js.map
