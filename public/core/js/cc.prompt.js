// Generated by CoffeeScript 1.8.0

/*
CC API JS Helper

Copyright (c) 2015 Scott Yang

Dependencies:
CC Core (cc.core.js)
jQuery (Ver 1.11+)
Q (Ver 1.x)
 */

(function() {
  (function(global) {
    "use strict";
    var rjDialog;
    rjDialog = (function() {
      function rjDialog() {}


      /*
      		Show alert
      
      		@param params JSON options
                header Header text
                content Body html
      
      		Example:
      		CC = new CarCrashSingletonClass({foo: 'bar'})
      		CC.dialog.alert "error"
       */

      rjDialog.alert = function(params) {
        var $domObj;
        params = rjDialog.parseDomParamsMessage(params);
        $domObj = rjDialog.parseDomParams(params);
        rjDialog.displayHtml($domObj);
      };


      /*
            Gets confirmation
      
            @params params JSON options
                header Header text
                content Body html
                input Input with .title and .value properties
       */

      rjDialog.prompt = function(params) {
        var $domObj;
        params = rjDialog.parseDomParamsMessage(params);
        if (!params.input) {
          $.extend(params, rjDialog.getDefaultPromptInput());
        }
        $domObj = rjDialog.parseDomParams(params);
        rjDialog.displayHtml($domObj);
        return $domObj.data('input-promise');
      };


      /*
            Gets confirmation
      
            @params params JSON options
                header Header text
                content Body html
                buttons Buttons with .title and .value properties
       */

      rjDialog.confirm = function(params) {
        var $domObj;
        if (params === void 0) {
          params = 'Are you sure?';
        }
        params = rjDialog.parseDomParamsMessage(params);
        if (!params.buttons) {
          $.extend(params, rjDialog.getDefaultConfirmButtons());
        }
        $domObj = rjDialog.parseDomParams(params);
        rjDialog.displayHtml($domObj);
        return $domObj.data('button-promise');
      };

      rjDialog.displayHtml = function($domObj) {
        $domObj.modal('show');
      };

      rjDialog.getDefaultPromptInput = function() {
        return {
          input: {
            title: 'Enter text',
            value: ''
          }
        };
      };

      rjDialog.getDefaultConfirmButtons = function() {
        return {
          buttons: [
            {
              title: 'OK',
              value: 1,
              "class": 'green'
            }, {
              title: 'Cancel',
              value: 0,
              "class": 'red'
            }
          ]
        };
      };

      rjDialog.parseDomParamsMessage = function(params) {
        var domParams;
        if (params == null) {
          params = 'Message';
        } else if (typeof params !== "string" && (params.content == null)) {
          params.content = '<p>' + 'Message' + '</p>';
        }
        if (typeof params === "string") {
          domParams = {
            content: '<p>' + params + '</p>'
          };
        } else {
          domParams = params;
        }
        return domParams;
      };

      rjDialog.parseDomParams = function(domParams) {
        var $button, $buttons, $content, $domObj, $input, button, deferred, _i, _len, _ref;
        $domObj = $('<div>').addClass('ui modal');
        $domObj.append($('<i>').addClass('icon close'));
        if (domParams.header) {
          $domObj.append($('<div>').addClass('header').html(domParams.header));
        }
        $content = $('<div>').addClass('content').html(domParams.content);
        if (domParams.input) {
          deferred = Q.defer();
          if (domParams.input.placeholder == null) {
            domParams.input.placeholder = '';
          }
          if (domParams.input.value == null) {
            domParams.input.value = '';
          }
          $input = $('<div>').addClass('ui input').append($('<input>').attr({
            placeholder: domParams.input.placeholder,
            type: "text"
          }).val(domParams.input.value));
          if (domParams.input.label) {
            $input.addClass('labeled');
            $input = $('<div>').addClass('field').append($('<label>').text(domParams.input.label)).append($input);
          }
          $content.append($input);
        }
        $domObj.append($content);
        if (domParams.input) {
          $buttons = $('<div>').addClass('actions').append($('<div>').addClass('ui button green').text('Submit').on('click', function() {
            deferred.resolve($(this).parents('.ui.modal').find('.ui.input > input').eq(0).val());
          }));
          $domObj.append($buttons);
          $domObj.data('input-promise', deferred.promise);
        }
        if (domParams.buttons) {
          deferred = Q.defer();
          $buttons = $('<div>').addClass('actions');
          _ref = domParams.buttons;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            button = _ref[_i];
            $button = $('<div>').addClass('ui button').text(button.title).data({
              value: button.value
            }).on('click', function() {
              deferred.resolve($(this).data('value'));
            });
            if (button["class"]) {
              $button.addClass(button["class"]);
            }
            $buttons.append($button);
          }
          $domObj.append($buttons);
          $domObj.data('button-promise', deferred.promise);
        }
        return $domObj;
      };

      return rjDialog;

    })();
    global.CarCrashSingletonClass.prototype.Dialog = rjDialog;
  })(window);

}).call(this);

//# sourceMappingURL=cc.prompt.js.map
