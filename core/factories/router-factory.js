// Generated by CoffeeScript 1.8.0
(function() {
  var DynamicViewsHandler, RoutesGroupFactory, SubdomainsHandler, express,
    __hasProp = {}.hasOwnProperty;

  express = require('express');

  SubdomainsHandler = require('../handlers/subdomain-handler.js');

  DynamicViewsHandler = require('../handlers/dynamic-views-handler.js');

  RoutesGroupFactory = {};

  RoutesGroupFactory.createRouter = function(file) {
    var router, routesConfig;
    routesConfig = require(file);
    router = {};
    router.registerRoutes = function(app) {
      var config, controllerFileName, controllerMethods, controllerRouter, error, key, middleware, middlewares, route, routeGroupIndex, routes, routesController, routesGroup, _i, _len, _ref, _ref1, _ref2, _ref3;
      routes = {};
      config = app.get('config');
      middlewares = app.get('middlewares');
      _ref = routesConfig.routesGroups;
      for (routeGroupIndex in _ref) {
        if (!__hasProp.call(_ref, routeGroupIndex)) continue;
        routesGroup = _ref[routeGroupIndex];
        controllerFileName = routesGroup.controller;
        if (routes[routeGroupIndex] == null) {
          controllerRouter = express.Router();
          controllerMethods = require('../../' + config.appDir + '/' + routesConfig.controllerPath + '/' + controllerFileName);
          controllerRouter.controllerMethods = controllerMethods;
          routes[routeGroupIndex] = controllerRouter;
          if (routesConfig.viewPath) {
            routesController = DynamicViewsHandler.attachControllerViews(routesConfig.viewPath, routes[routeGroupIndex]);
          } else {
            routesController = DynamicViewsHandler.attachControllerViews(false, routes[routeGroupIndex]);
          }
        }
        if ((_ref1 = routesGroup.middlewares) != null ? _ref1.length : void 0) {
          try {
            _ref2 = routesGroup.middlewares;
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              middleware = _ref2[_i];
              routes[routeGroupIndex].use(middlewares[middleware]);
            }
          } catch (_error) {
            error = _error;
            console.log('Error registering middleware(s) for ' + controllerFileName);
            throw error;
          }
        }
        _ref3 = routesGroup.routes;
        for (key in _ref3) {
          if (!__hasProp.call(_ref3, key)) continue;
          route = _ref3[key];
          try {
            routes[routeGroupIndex][route.method](route.url, routes[routeGroupIndex]['controllerMethods'][route.handler]);
          } catch (_error) {
            error = _error;
            console.log('Error registering route ' + route.handler + '.' + route.method);
            throw error;
          }
        }
        if (routesConfig.subdomain == null) {
          routesConfig.subdomain = '';
        }
        app.use(routesGroup.prefix, SubdomainsHandler.createRoutes(routesConfig.subdomain, routesController));
      }
      return true;
    };
    return router;
  };

  module.exports = RoutesGroupFactory;

}).call(this);

//# sourceMappingURL=router-factory.js.map
